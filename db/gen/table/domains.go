//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Domains = newDomainsTable("", "domains", "")

type domainsTable struct {
	sqlite.Table

	// Columns
	Domain      sqlite.ColumnString
	CreatedTs   sqlite.ColumnInteger
	CreatedByID sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type DomainsTable struct {
	domainsTable

	EXCLUDED domainsTable
}

// AS creates new DomainsTable with assigned alias
func (a DomainsTable) AS(alias string) *DomainsTable {
	return newDomainsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DomainsTable with assigned schema name
func (a DomainsTable) FromSchema(schemaName string) *DomainsTable {
	return newDomainsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DomainsTable with assigned table prefix
func (a DomainsTable) WithPrefix(prefix string) *DomainsTable {
	return newDomainsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DomainsTable with assigned table suffix
func (a DomainsTable) WithSuffix(suffix string) *DomainsTable {
	return newDomainsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDomainsTable(schemaName, tableName, alias string) *DomainsTable {
	return &DomainsTable{
		domainsTable: newDomainsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newDomainsTableImpl("", "excluded", ""),
	}
}

func newDomainsTableImpl(schemaName, tableName, alias string) domainsTable {
	var (
		DomainColumn      = sqlite.StringColumn("domain")
		CreatedTsColumn   = sqlite.IntegerColumn("created_ts")
		CreatedByIDColumn = sqlite.IntegerColumn("created_by_id")
		allColumns        = sqlite.ColumnList{DomainColumn, CreatedTsColumn, CreatedByIDColumn}
		mutableColumns    = sqlite.ColumnList{CreatedTsColumn, CreatedByIDColumn}
	)

	return domainsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Domain:      DomainColumn,
		CreatedTs:   CreatedTsColumn,
		CreatedByID: CreatedByIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

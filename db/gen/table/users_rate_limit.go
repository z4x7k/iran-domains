//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UsersRateLimit = newUsersRateLimitTable("", "users_rate_limit", "")

type usersRateLimitTable struct {
	sqlite.Table

	// Columns
	TheUserID    sqlite.ColumnInteger
	LastAccessTs sqlite.ColumnInteger
	TheCount     sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UsersRateLimitTable struct {
	usersRateLimitTable

	EXCLUDED usersRateLimitTable
}

// AS creates new UsersRateLimitTable with assigned alias
func (a UsersRateLimitTable) AS(alias string) *UsersRateLimitTable {
	return newUsersRateLimitTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersRateLimitTable with assigned schema name
func (a UsersRateLimitTable) FromSchema(schemaName string) *UsersRateLimitTable {
	return newUsersRateLimitTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersRateLimitTable with assigned table prefix
func (a UsersRateLimitTable) WithPrefix(prefix string) *UsersRateLimitTable {
	return newUsersRateLimitTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersRateLimitTable with assigned table suffix
func (a UsersRateLimitTable) WithSuffix(suffix string) *UsersRateLimitTable {
	return newUsersRateLimitTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersRateLimitTable(schemaName, tableName, alias string) *UsersRateLimitTable {
	return &UsersRateLimitTable{
		usersRateLimitTable: newUsersRateLimitTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newUsersRateLimitTableImpl("", "excluded", ""),
	}
}

func newUsersRateLimitTableImpl(schemaName, tableName, alias string) usersRateLimitTable {
	var (
		TheUserIDColumn    = sqlite.IntegerColumn("the_user_id")
		LastAccessTsColumn = sqlite.IntegerColumn("last_access_ts")
		TheCountColumn     = sqlite.IntegerColumn("the_count")
		allColumns         = sqlite.ColumnList{TheUserIDColumn, LastAccessTsColumn, TheCountColumn}
		mutableColumns     = sqlite.ColumnList{LastAccessTsColumn, TheCountColumn}
	)

	return usersRateLimitTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TheUserID:    TheUserIDColumn,
		LastAccessTs: LastAccessTsColumn,
		TheCount:     TheCountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
